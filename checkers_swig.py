# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_checkers_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_checkers_swig')
    _checkers_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_checkers_swig', [dirname(__file__)])
        except ImportError:
            import _checkers_swig
            return _checkers_swig
        try:
            _mod = imp.load_module('_checkers_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _checkers_swig = swig_import_helper()
    del swig_import_helper
else:
    import _checkers_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _checkers_swig.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _checkers_swig.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _checkers_swig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _checkers_swig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _checkers_swig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _checkers_swig.SwigPyIterator_equal(self, x)

    def copy(self):
        return _checkers_swig.SwigPyIterator_copy(self)

    def next(self):
        return _checkers_swig.SwigPyIterator_next(self)

    def __next__(self):
        return _checkers_swig.SwigPyIterator___next__(self)

    def previous(self):
        return _checkers_swig.SwigPyIterator_previous(self)

    def advance(self, n):
        return _checkers_swig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _checkers_swig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _checkers_swig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _checkers_swig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _checkers_swig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _checkers_swig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _checkers_swig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _checkers_swig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

CellStatus__None = _checkers_swig.CellStatus__None
CellStatus_Black = _checkers_swig.CellStatus_Black
CellStatus_White = _checkers_swig.CellStatus_White
CellStatus_BlackQueen = _checkers_swig.CellStatus_BlackQueen
CellStatus_WhiteQueen = _checkers_swig.CellStatus_WhiteQueen
CellStatus_Forbidden = _checkers_swig.CellStatus_Forbidden
Team__None = _checkers_swig.Team__None
Team_Black = _checkers_swig.Team_Black
Team_White = _checkers_swig.Team_White

def TeamOfCell(status):
    return _checkers_swig.TeamOfCell(status)
TeamOfCell = _checkers_swig.TeamOfCell

def Opponent(team):
    return _checkers_swig.Opponent(team)
Opponent = _checkers_swig.Opponent

def IsQueen(cell):
    return _checkers_swig.IsQueen(cell)
IsQueen = _checkers_swig.IsQueen
class GameState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameState, name)
    __repr__ = _swig_repr
    __swig_setmethods__["State"] = _checkers_swig.GameState_State_set
    __swig_getmethods__["State"] = _checkers_swig.GameState_State_get
    if _newclass:
        State = _swig_property(_checkers_swig.GameState_State_get, _checkers_swig.GameState_State_set)
    __swig_setmethods__["Parent"] = _checkers_swig.GameState_Parent_set
    __swig_getmethods__["Parent"] = _checkers_swig.GameState_Parent_get
    if _newclass:
        Parent = _swig_property(_checkers_swig.GameState_Parent_get, _checkers_swig.GameState_Parent_set)
    __swig_setmethods__["CurrentTeam"] = _checkers_swig.GameState_CurrentTeam_set
    __swig_getmethods__["CurrentTeam"] = _checkers_swig.GameState_CurrentTeam_get
    if _newclass:
        CurrentTeam = _swig_property(_checkers_swig.GameState_CurrentTeam_get, _checkers_swig.GameState_CurrentTeam_set)

    def __init__(self, *args):
        this = _checkers_swig.new_GameState(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        CreateEmpty = staticmethod(_checkers_swig.GameState_CreateEmpty)
    else:
        CreateEmpty = _checkers_swig.GameState_CreateEmpty

    def Equal(self, other):
        return _checkers_swig.GameState_Equal(self, other)

    def Hash(self):
        return _checkers_swig.GameState_Hash(self)
    if _newclass:
        Index = staticmethod(_checkers_swig.GameState_Index)
    else:
        Index = _checkers_swig.GameState_Index

    def IsTerminal(self):
        return _checkers_swig.GameState_IsTerminal(self)

    def At(self, i, j):
        return _checkers_swig.GameState_At(self, i, j)

    def Cell(self, i, j):
        return _checkers_swig.GameState_Cell(self, i, j)

    def KillingMovesFor(self, team):
        return _checkers_swig.GameState_KillingMovesFor(self, team)

    def NonKillingMovesFor(self, team):
        return _checkers_swig.GameState_NonKillingMovesFor(self, team)

    def KillingMovesForQueen(self, i, j):
        return _checkers_swig.GameState_KillingMovesForQueen(self, i, j)

    def KillingMovesForRegular(self, i, j):
        return _checkers_swig.GameState_KillingMovesForRegular(self, i, j)

    def NonKillingMovesForQueen(self, i, j):
        return _checkers_swig.GameState_NonKillingMovesForQueen(self, i, j)

    def NonKillingMovesForRegular(self, i, j):
        return _checkers_swig.GameState_NonKillingMovesForRegular(self, i, j)

    def Expand(self):
        return _checkers_swig.GameState_Expand(self)

    def Dump(self, stream):
        return _checkers_swig.GameState_Dump(self, stream)

    def __eq__(self, other):
        return _checkers_swig.GameState___eq__(self, other)
    __swig_destroy__ = _checkers_swig.delete_GameState
    __del__ = lambda self: None
GameState_swigregister = _checkers_swig.GameState_swigregister
GameState_swigregister(GameState)
cvar = _checkers_swig.cvar
BoardSize = cvar.BoardSize

def GameState_CreateEmpty():
    return _checkers_swig.GameState_CreateEmpty()
GameState_CreateEmpty = _checkers_swig.GameState_CreateEmpty

def GameState_Index(i, j):
    return _checkers_swig.GameState_Index(i, j)
GameState_Index = _checkers_swig.GameState_Index

# This file is compatible with both classic and new-style classes.


